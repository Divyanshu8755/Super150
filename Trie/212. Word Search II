class Solution {
    public class Node{
        char data;
        String isTerminal;
        HashMap<Character,Node> child=new HashMap<>();
    }
    public void Insert(String word,Node root){
        Node curr=root;
        for(int i=0;i<word.length();i++){
            char ch=word.charAt(i);
            if(curr.child.containsKey(ch)){
                curr=curr.child.get(ch);
            }
            else{
                Node nn=new Node();
                nn.data=ch;
                curr.child.put(ch,nn);
                curr=nn;
            }
        }
        curr.isTerminal=word;
    }
    List<String> ls=new ArrayList<>();
    public void wordSearch(char[][] board,int r,int c,Node root){
        if(r<0 || c<0 || r>=board.length || c>=board[0].length || !root.child.containsKey(board[r][c])){
            return;
        }
        char ch=board[r][c];
        Node curr=root.child.get(ch);
        if(curr.isTerminal!=null){
            ls.add(curr.isTerminal);
            curr.isTerminal=null;
        }
        board[r][c]='*';
        wordSearch(board,r+1,c,curr);
        wordSearch(board,r-1,c,curr);
        wordSearch(board,r,c+1,curr);
        wordSearch(board,r,c-1,curr);
        board[r][c]=ch;
    }
    public List<String> findWords(char[][] board, String[] words) {
        Node root=new Node();
        for(String st:words){
            Insert(st,root);
        }
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(root.child.containsKey(board[i][j])){
                    wordSearch(board,i,j,root);
                }
            }
        }
        return ls;
    }
}
