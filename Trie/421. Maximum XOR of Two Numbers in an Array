class Solution {
    public class Node{
        Node zero;
        Node one;
    }
    public void Insert(Node root,int val){
        Node curr=root;
        for(int i=31;i>=0;i--){
            int bit=(val & (1<<i));
            if(bit == 0){
                if(curr.zero!=null){
                    curr=curr.zero;
                }
                else{
                    Node nn=new Node();
                    curr.zero=nn;
                    curr=nn;
                }
            }
            else{
                if(curr.one!=null){
                    curr=curr.one;
                }
                else{
                    Node nn=new Node();
                    curr.one=nn;
                    curr=nn;
                }
            }
        }
    }
    public int getXor(Node root,int val){
        Node curr=root;
        int ans=0;
        for(int i=31;i>=0;i--){
            int bit=(val & (1<<i));
            if(bit == 0){
                if(curr.one!=null){
                    ans+=(1<<i);
                    curr=curr.one;
                }
                else{
                    curr=curr.zero;
                }
            }
            else{
                if(curr.zero!=null){
                    ans+=(1<<i);
                    curr=curr.zero;
                }
                else{
                    curr=curr.one;
                }
            }
        }
        return ans;
    }
    public int findMaximumXOR(int[] nums) {
        Node root=new Node();
        for(int x:nums){
            Insert(root,x);
        }
        int max=Integer.MIN_VALUE;
        for(int x:nums){
            max=Math.max(max,getXor(root,x));
        }
        return max;
    }
}
